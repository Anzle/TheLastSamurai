Notes:
  - All references to the "Heap" refer to our static char array
  - Our heap does not grow dynamically. The Assignment Specifications are written in a way that urge against that. 
  - In the event of success, our malloc returns the pointer
  - In the event of failure, our malloc returns 0 AND prints where the call occurred
  
mymalloc Test Cases:
  - test1 - Filling/Freeing the heap with integers
    Input: all the ints the heap can hold
    Output: "Out of Space for allocation __FILE__:__func__:__LINE__"
    
  - test2 - Adding things of different sizes
    Input: 3 structs above threshhold, 10 chars
    Output: Allocated Space: 0
            Remaining Space: 5000
            Allocated Space: 130
            Remaining Space: 4870

    
  - test3 - Adding things of different sizes in different orders
    Input: 3 structs above threshhold, 10 chars
    Output: Before Allocation
            Allocated Space: 0
            Remaining Space: 5000
            After Allocation
            Allocated Space: 130
            Remaining Space: 4870
            After Free
            Allocated Space: 0
            Remaining Space: 5000

  
  - test4 - Add free Add
    Input: 4 structs above threshhold, 100 chars, 50 ints
    Output: 
            Before Allocation
            Allocated Space: 0
            Remaining Space: 5000

            Allocated Space: 24
            Remaining Space: 5000
            Allocated Space: 220
            Remaining Space: 4780

            After Allocation
            Allocated Space: 220
            Remaining Space: 4780

            After RE:Allocation
            Allocated Space: 436
            Remaining Space: 4564

            After Free
            Allocated Space: 0
            Remaining Space: 5000

	
myfree Test Cases:
  - test1 - Free pointers that were never allocated
	Input: 
		int x; 
		free(&x);
	Output: "Error: Memory Not Allocated __FILE__:__LINE__"
  
  - test2 - Free pointers to dynamic memory that were not returned from malloc()
	Input: 
		char* p = (char *) malloc(300);
		free(p+10);
	Output: "Error: Memory Not Allocated via malloc() __FILE__:__LINE__"
	
  - test3 - Free pointers twice
	Input:
		char * p = (char *) malloc(300);
		free(p);
		free(p);
	Output: "Error: Memory Already Freed __FILE__:__LINE__"
	
  - test4 - Regular freeing of memory
	Input: Create dynamic memory with malloc() and then free the memory with free()
	Output: